drop function if exists public.mvt_geom_from_point; 

CREATE OR REPLACE
FUNCTION public.mvt_geom_from_point( z integer, x integer, y integer,
				tbl_name_proj_rnd varchar default 'public.building_footprints_open_data_rnd' , 					
				geom_col_name varchar default  'geom',
				max_zoom integer default 13,
				min_zoom integer default 6)
RETURNS table (geom geometry)
AS $$
DECLARE
 	sql_cmd varchar;
	lim integer;
BEGIN

	
	if z >= max_zoom then
		lim := POWER(10,8); -- no effective limit

		sql_cmd :=  '
		SELECT 
			ST_Intersection( ' ||
						geom_col_name || ', 
						ST_TileEnvelope( ' || z || ',' || x || ',' || y || ') 
						) AS geom
		  FROM  
				 '  || tbl_name_proj_rnd || '
		  WHERE ST_Intersects(  ' ||
						geom_col_name || ', 
						ST_TileEnvelope( ' || z || ',' || x || ',' || y || ') 
						)
		  LIMIT ' ||  lim || ';'
		;	

	else  
		lim := GREATEST( 200, POWER(2, z)); -- 2**10 ~ 1024

		sql_cmd :=  '
		SELECT 
			ST_Intersection( ST_Envelope ( ' ||
						geom_col_name || '), 
						ST_TileEnvelope( ' || z || ',' || x || ',' || y || ') 
						) AS geom
		  FROM  
				 '  || tbl_name_proj_rnd || '
		  WHERE ST_Intersects(  ' ||
						geom_col_name || ', 
						ST_TileEnvelope( ' || z || ',' || x || ',' || y || ') 
						)
		  LIMIT ' ||  lim || ';'
		;	
	end if;
	
	
	RAISE NOTICE 'SQL Code: (%)', sql_cmd;
 
	RETURN QUERY EXECUTE sql_cmd;
END;
$$
LANGUAGE 'plpgsql'
Stable
PARALLEL SAFE;

COMMENT ON FUNCTION public.mvt_geom_from_point IS E'From based on the zoom level, either return all features (geometry) in a given tile enveloppe or a random subset of these.'